//===================================================================
//  GRID
//===================================================================

$grid-max-width: 1000px !default;
$grid-total-columns: 12 !default;

$grid-gutter-size: 30px !default;
$grid-gutter-half-size: ($grid-gutter-size / 2) !default;

$grid-row-class: g-row !default;
$grid-column-class: g-col !default;
$grid-offset-class: offset- !default;
$grid-pull-class: pull- !default;
$grid-push-class: push- !default;

$grid-include-row: true !default;
$grid-include-column: true !default;
$grid-include-offset: true !default;
$grid-include-pull: true !default;
$grid-include-push: true !default;
$grid-include-responsive: true !default;


@function grid-column-width($columns, $total-columns: $grid-total-columns) {
  $width: percentage($columns / $total-columns);

  @if $width == 0% {
    @return 0;
  }

  @return $width;
}


@mixin grid-row {
  margin: 0 auto;
  width: 100%;
  max-width: $grid-max-width;

  &:before,
  &:after {
    content: '';
    display: table;
  }

  &:after {
    clear: both;
  }

  & & {
    margin: 0 (-$grid-gutter-half-size);
    width: auto;
  }
}


@mixin grid-column($float: left) {
  float: $float;
  position: relative;
  padding-left: $grid-gutter-half-size;
  padding-right: $grid-gutter-half-size;
}


@mixin grid-offset($columns) {
  margin-left: grid-column-width($columns);
}


@mixin grid-offset-classes($prefix: null) {
  @for $i from 0 to $grid-total-columns {
    $suffix: if($i > 0, $i + $width-delimiter + $grid-total-columns, 0);
    .#{$prefix}#{$grid-offset-class}#{$suffix} {
      @include grid-offset($i);
    }
  }
}


@mixin grid-pull($columns) {
  left: auto;
  right: grid-column-width($columns);
}


@mixin grid-pull-classes($prefix: null) {
  @for $i from 0 to $grid-total-columns {
    $suffix: if($i > 0, $i + $width-delimiter + $grid-total-columns, 0);
    .#{$prefix}#{$grid-pull-class}#{$suffix} {
      @include grid-pull($i);
    }
  }
}


@mixin grid-push($columns) {
  left: grid-column-width($columns);
  right: auto;
}


@mixin grid-push-classes($prefix: null) {
  @for $i from 0 to $grid-total-columns {
    $suffix: if($i > 0, $i + $width-delimiter + $grid-total-columns, 0);
    .#{$prefix}#{$grid-push-class}#{$suffix} {
      @include grid-push($i);
    }
  }
}


@mixin grid-classes(
  $include-row: $grid-include-row,
  $include-column: $grid-include-column,
  $include-offset: $grid-include-offset,
  $include-pull: $grid-include-pull,
  $include-push: $grid-include-push,
  $include-responsive: $grid-include-responsive) {

  // row class
  @if $include-row {
    .#{$grid-row-class} {
      @include grid-row;
    }
  }

  // column class
  @if $include-column {
    .#{$grid-column-class} {
      @include grid-column;
      width: 100%;
    }
  }

  // column widths
  @include width-classes($grid-total-columns);
  @include width-util-classes();

  // colum offset classes
  @if $include-offset {
    @include grid-offset-classes;
  }

  // breakpoint-specific grid classes
  @if $include-responsive {
    @each $key, $value in $breakpoints {
      $min: if($value == 0, null, $key);
      $prefix: map_get($breakpoint-prefixes, $key);

      @include media-query($min) {
        // column widths
        @include width-classes($grid-total-columns, $prefix);
        @include width-util-classes($prefix);

        // colum offset classes
        @if $include-offset {
          @include grid-offset-classes($prefix);
        }

        // column pull classes
        @if $include-pull {
          @include grid-pull-classes($prefix);
        }

        // column push classes
        @if $include-push {
          @include grid-push-classes($prefix);
        }
      }
    }
  }
}
